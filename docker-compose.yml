version: '3'
services:    
  dependencies:
    container_name: dependencies
    build: .
    image: base  
    command: tail -f /dev/null
  db:
    container_name: postgres_ticketnest_db
    image: postgres:16.0
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ticketnest_db
    healthcheck:
      test: "pg_isready --username=postgres && psql --username=postgres --list"
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
  redis-events:
      container_name: redis-events
      image: redis:latest
      ports: 
        - "6379:6379"
      healthcheck:
        test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
        interval: 1s
        timeout: 3s
        retries: 5
  auth:
    container_name: auth-service
    build: 
      context: ./cmd/auth
      dockerfile: Dockerfile
    volumes:
      - ./logs:/app/logs
    ports:
      - "8090:8090"
    depends_on:
      db:
        condition: service_healthy
      dependencies:
        condition: service_started
  event:
    container_name: event-service
    restart: always
    build: 
      context: ./cmd/event
      dockerfile: Dockerfile
    volumes:
      - ./logs:/app/logs
    ports:
      - "8091:8090"
    depends_on:
      db:
        condition: service_healthy
      redis-events:
        condition: service_healthy
      dependencies:
        condition: service_started
  ticket:
    container_name: ticket-service
    restart: always
    build: 
      context: ./cmd/ticket
      dockerfile: Dockerfile
    volumes:
      - ./logs:/app/logs
      - ./images:/app/images
    ports:
      - "8092:8090"
    depends_on:
      db:
        condition: service_healthy
      dependencies:
        condition: service_started
  payment:
    container_name: payment-service
    restart: always
    build: 
      context: ./cmd/payment
      dockerfile: Dockerfile
    volumes:
      - ./logs:/app/logs
    ports:
      - "8093:8090"
    depends_on:
      db:
        condition: service_healthy
      dependencies:
        condition: service_started
      
